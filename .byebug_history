c
C
c
@user.token
@user
c
@user.token
@user
c
@user.password
c
@user.password
c
BCrypt::Password.create(params[:password])c
BCrypt::Password.create(params[:password])
@user.password == BCrypt::Password.create(params[:password])
@user.password
c
@user.password == BCrypt::Password.create(params[:password])
@user.password = 123456
@user.password
@user.encrypted_password
BCrypt::Password.create(params[:password])
c
BCrypt::Password.create(params[:password])
@user.encrypted_password
c
@user.encrypted_password
@user
params[:password]
@user.password
@user.password == params[:password]
c
@user
params[:email]
c
@user
params[:email]
@user
c
@user
params[:email]
c
@user
params[:email]
c
@user
params[:email]
c
params
product_params
c
@carts
@carts.each do |cart|
   13:         end
   12:             @total=@total+cart.subtotal
@carts.each do |cart|
c
continue
c
@orders
 end
continue
continu
@cart
@oldstok
continue
params
@oldstok
@cart
continue
@product.quantity
@product.stok + @stok.to_i
 @product.stok
 @product= Product.find(@cart.product_id)
 @product.quantity = @product.stok + @stok.to_i
continue
@product.stok + @stok.to_i
@product.stok + @cart.pro_stok
@product.stok
@stok.to_i
@product.stok
 @product
continue
@product.stok
@stok.to_i
continue
@stok.to_i
@cart.update(stok_params)
@product.stok
@stok =params[:cart][:pro_stok]
continue
@cart.pro_stok
 @stok =params[:cart][:pro_stok]
continue
@stok =params[:cart][:pro_stok]
@cart = Cart.find(params[:id])
c
@cart.pro_stok
 @product.stok - @cart.pro_stok
@product.stok
params
c
@product
c
@product
params['product']['name']
params['product']
params
continue
n
@product = Product.new
continue
@product = Product.new
continue
c
n
if current_user.seller== seller 
